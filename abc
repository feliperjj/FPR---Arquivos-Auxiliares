#include <stdio.h>
#include <stdlib.h>

typedef struct No {
    int dado;
    struct No* prox;
} TNo;

typedef struct Lista {
    TNo* inicio;
} TLista;

TNo* criarNo(int valor) {
    TNo* novoNo = (TNo*)malloc(sizeof(TNo));
    novoNo->dado = valor;
    novoNo->prox = NULL;
    return novoNo;
}

TLista* criarLista() {
    TLista* novaLista = (TLista*)malloc(sizeof(TLista));
    novaLista->inicio = NULL;
    return novaLista;
}

void inserirNo(TLista* lista, int valor) {
    TNo* novoNo = criarNo(valor);

    if (lista->inicio == NULL) {
        lista->inicio = novoNo;
    } else {
        TNo* noAtual = lista->inicio;
        while (noAtual->prox != NULL) {
            noAtual = noAtual->prox;
        }
        noAtual->prox = novoNo;
    }
}

int verificarOrdenacao(TLista* lista, int n) {
    TNo* noAtual = lista->inicio;

    while (noAtual != NULL) {
        if (noAtual->dado > n) {
            return 0;  // Encontrou um valor maior, retorna 0
        }
        noAtual = noAtual->prox;
    }

    return 1;  // Todos os valores sÃ£o menores ou iguais, retorna 1
}

void liberarLista(TLista* lista) {
    TNo* noAtual = lista->inicio;
    while (noAtual != NULL) {
        TNo* temp = noAtual;
        noAtual = noAtual->prox;
        free(temp);
    }
    free(lista);
}

int main() {
    TLista* listaOriginal = criarLista();

    inserirNo(listaOriginal, 2);
    inserirNo(listaOriginal, 4);
    inserirNo(listaOriginal, 6);
    inserirNo(listaOriginal, 8);
    inserirNo(listaOriginal, 10);

    int valorReferencia = 15;
    int ordenado = verificarOrdenacao(listaOriginal, valorReferencia);

    liberarLista(listaOriginal);

    if (ordenado) {
        printf("1\n");
    } else {
        printf("0\n");
    }

    return 0;
}
