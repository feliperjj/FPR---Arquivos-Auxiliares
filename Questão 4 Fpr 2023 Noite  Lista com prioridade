#include <stdio.h>
#include <stdlib.h>

#define TAM 5 // Número de filas de prioridade

typedef struct No {
    int dado;
    struct No* prox;
} TNo;

typedef struct Fila {
    TNo* inicio;
} TFila;

TNo* criarNo(int valor) {
    TNo* novoNo = (TNo*)malloc(sizeof(TNo));
    novoNo->dado = valor;
    novoNo->prox = NULL;
    return novoNo;
}

TFila* criarFila() {
    TFila* novaFila = (TFila*)malloc(sizeof(TFila));
    novaFila->inicio = NULL;
    return novaFila;
}

void inserirNo(TFila* fila, int valor) {
    TNo* novoNo = criarNo(valor);

    if (fila->inicio == NULL) {
        fila->inicio = novoNo;
    } else {
        TNo* noAtual = fila->inicio;
        while (noAtual->prox != NULL) {
            noAtual = noAtual->prox;
        }
        noAtual->prox = novoNo;
    }
}

int removerNo(TFila* fila) {
    if (fila->inicio == NULL) {
        printf("A fila está vazia.\n");
        return -1;
    }

    TNo* primeiroNo = fila->inicio;
    int dado = primeiroNo->dado;
    fila->inicio = primeiroNo->prox;
    free(primeiroNo);
    return dado;
}

void enfileirar(TFila* filasPrioridades[], int valor, int prioridade) {
    if (prioridade < 0 || prioridade >= TAM) {
        printf("A prioridade informada é inválida.\n");
        return;
    }

    inserirNo(filasPrioridades[prioridade], valor);
}

int desenfileirar(TFila* filasPrioridades[]) {
    int i;

    for (i = 0; i < TAM; i++) {
        if (filasPrioridades[i]->inicio != NULL) {
            return removerNo(filasPrioridades[i]);
        }
    }

    printf("Todas as filas estão vazias.\n");
    return -1;
}

void imprimirFilas(TFila* filasPrioridades[]) {
    int i;

    for (i = 0; i < TAM; i++) {
        printf("Fila %d: ", i);
        TNo* noAtual = filasPrioridades[i]->inicio;
        while (noAtual != NULL) {
            printf("%d ", noAtual->dado);
            noAtual = noAtual->prox;
        }
        printf("\n");
    }
}

void liberarFilas(TFila* filasPrioridades[]) {
    int i;

    for (i = 0; i < TAM; i++) {
        TNo* noAtual = filasPrioridades[i]->inicio;
        while (noAtual != NULL) {
            TNo* temp = noAtual;
            noAtual = noAtual->prox;
            free(temp);
        }
        free(filasPrioridades[i]);
    }
}

int main() {
    TFila* filasPrioridades[TAM];
    int i;

    // Inicializar as filas de prioridades
    for (i = 0; i < TAM; i++) {
        filasPrioridades[i] = criarFila();
    }

    int valor, prioridade;

    // Enfileirar elementos manualmente
    printf("Enfileirar elementos (digite -1 para parar):\n");
    while (1) {
        printf("Digite o valor: ");
        scanf("%d", &valor);
        
        if (valor == -1) {
            break;
        }
        
        printf("Digite a prioridade (0 a %d): ", TAM - 1);
        scanf("%d", &prioridade);

        enfileirar(filasPrioridades, valor, prioridade);
    }

    printf("Filas com prioridades:\n");
    imprimirFilas(filasPrioridades);

    printf("Removendo elementos:\n");
    while (1) {
        int elemento = desenfileirar(filasPrioridades);
        if (elemento == -1) {
            break;
        }
        printf("Elemento removido: %d\n", elemento);
    }

    liberarFilas(filasPrioridades);

    return 0;
}
//////////////////////////////////////////////////////////
//Questão 04 [2,5 pontos]:
//Dadas duas pilhas P1 e P2, ambas do tipo TLista, desenvolver uma função que determine quantos elementos de P1
//também estão em P2.
//Notas:
//1. Caso determinado valor apareça mais de uma vez em P1, a solução final poderá contá-lo tantas vezes
//quantas forem as suas ocorrências;
//2. Caso alguma estrutura auxiliar seja necessária, esta será obrigatoriamente uma pilha ou uma fila;
//3. A solução apresentada deve respeitar as regras de manipulação de pilhas e/ou filas, em sua versão
//clássica.

#include <stdio.h>
#include <stdlib.h>

//definição de constantes
#define TRUE 1
#define FALSE 0

//definição de tipos
typedef struct No {
	int valor;
	struct No* prox;
} TNo;

typedef TNo* TLista;

//protótipos das funções
int empilhar (TLista *P, int numero);
int desempilhar (TLista *P, int *numero);
int topo (TLista P, int *t);

int menu ();

//main 
void main ()
{
	//declaração de variáveis
	TLista P = NULL;  //representando a pilha inicialmente vazia
	int numero, op;
	
	do
	{
		system ("CLS");		//limpar tela    clrscr();
		
		//exibindo o meu ao usuário
		op = menu ();
		
		//verificando a opção escolhida
		switch (op)
		{
			//Empilhar
			case 1: printf ("\nEntre com o valor a ser empilhado: ");
			        scanf ("%d", &numero);
			        
			        //chamando a função
			        if (empilhar (&P, numero) == TRUE)
			        {
			        	printf ("\n\tInsercao realizada com sucesso na pilha!\n");
					}
					else
					{
						printf ("\n\tERRO: insercao nao realizada na pilha!\n");
					}
					break;

			//Desempilhar
			case 2: //chamando a função
			        if (desempilhar (&P, &numero) == TRUE)
			        {
			        	printf ("\n\tO numero %d foi desempilhado\n", numero);
					}
					else
					{
						printf ("\n\tERRO: Pilha vazia!");
					}
					break;

			//Topo
			case 3: //chamando a função
			        if (topo (P, &numero) == TRUE)
			        {
			        	printf ("\n\tTopo da pilha: %d\n", numero);
					}
					else
					{
						printf ("\n\tERRO: Pilha vazia!");
					}
					break;
					
			//Saída
			case 4: printf ("\n\nPrograma finalizado!");
			        break;
			        
			default: printf ("\n\nOpcao invalida! Tente novamente.");
		}
		
		system ("PAUSE");
	}
	while (op != 4);
}

//implementação das funções

//inserindo no início da lista
int empilhar (TLista *P, int numero)
{
	//declaração de variáveis
	TLista aux;
	
	//Passo 1: alocar memória para o novo valor
	aux = malloc (sizeof(TNo));
	
	//verificar se a memória foi alocada
	if (!aux)
	{
		return FALSE;
	}
	else
	{
		//Passo 2: inserir o novo valor no campo 'valor' da memória recém-alocada
		aux->valor = numero;
		
		//Passo 3: fazer com que o campo 'prox' da memória recém-alocada
		//aponte para o "antigo" topo da pilha
		aux->prox = *P;
		
		//Passo 4: Faz a pilha apontar para o novo nó
		*P = aux;
		
		return TRUE;
	}
}

int desempilhar (TLista *P, int *numero)
{
	//declaração de variáveis
	TLista aux;
	
	//verificando se a pilha está vazia
	//if (*P == NULL)
	if (!(*P))
	{
		return FALSE;
	}
	else
	{
		aux = *P;
		*P = aux->prox;  //ou   *P = (*P)->prox;
		
		//salvando em 'numero' o valor que estava no topo
		*numero = aux->valor;
		
		free (aux);
		
		return TRUE;
	}		
}

int topo (TLista P, int *t)
{
	//verificando se a pilha está vazia
	if (!P)
	{
		return FALSE;
	}
	else
	{
		*t = P->valor;
		
		return TRUE;
	}
}

int menu ()
{
	//declaração de variáveis
	int opcao;
	
	//exibindo o meu ao usuário
	printf ("Menu de Operacoes:\n\n");
	printf ("(1) Empilhar\n");
	printf ("(2) Desempilhar\n");
	printf ("(3) Topo\n");
	printf ("(4) Sair\n\n");
	
	//lendo a opção do usuário
	printf ("Entre com a sua opcao: ");
	scanf ("%d", &opcao);
	
	//retornando a opção escolhida
	return opcao;
}
