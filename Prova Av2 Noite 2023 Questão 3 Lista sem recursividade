#include <stdio.h>
#include <stdlib.h>

typedef struct No {
    int dado;
    struct No* prox;
} TNo;

typedef struct Lista {
    TNo* inicio;
} TLista;

TNo* criarNo(int valor) {
    TNo* novoNo = (TNo*)malloc(sizeof(TNo));
    novoNo->dado = valor;
    novoNo->prox = NULL;
    return novoNo;
}

TLista* criarLista() {
    TLista* novaLista = (TLista*)malloc(sizeof(TLista));
    novaLista->inicio = NULL;
    return novaLista;
}

void inserirNo(TLista* lista, int valor) {
    TNo* novoNo = criarNo(valor);

    if (lista->inicio == NULL) {
        lista->inicio = novoNo;
    } else {
        TNo* noAtual = lista->inicio;
        while (noAtual->prox != NULL) {
            noAtual = noAtual->prox;
        }
        noAtual->prox = novoNo;
    }
}

int verificarOrdenacao(TLista* lista, int n) {
    TNo* noAtual = lista->inicio;
    int todosMenoresOuIguais = 1;
    int todosMaioresOuIguais = 1;

    while (noAtual != NULL) {
        if (noAtual->dado > n) {
            todosMenoresOuIguais = 0;
        } else {
            todosMaioresOuIguais = 0;
        }
        noAtual = noAtual->prox;
    }

    if (todosMenoresOuIguais || todosMaioresOuIguais) {
        return 1;
    } else {
        return 0;
    }
}

void imprimirLista(TLista* lista) {
    TNo* noAtual = lista->inicio;
    while (noAtual != NULL) {
        printf("%d ", noAtual->dado);
        noAtual = noAtual->prox;
    }
    printf("\n");
}

void liberarLista(TLista* lista) {
    TNo* noAtual = lista->inicio;
    while (noAtual != NULL) {
        TNo* temp = noAtual;
        noAtual = noAtual->prox;
        free(temp);
    }
    free(lista);
}

int main() {
    TLista* listaOriginal = criarLista();
    int n;
    int valor;

    printf("Digite o número de elementos da lista: ");
    scanf("%d", &n);

    printf("Digite os elementos da lista:\n");
    for (int i = 0; i < n; i++) {
        printf("Elemento %d: ", i + 1);
        scanf("%d", &valor);
        inserirNo(listaOriginal, valor);
    }

    printf("Digite o valor de referência: ");
    scanf("%d", &valor);

    int ordenado = verificarOrdenacao(listaOriginal, valor);

    printf("Lista original: ");
    imprimirLista(listaOriginal);

    liberarLista(listaOriginal);

    if (ordenado) {
        printf("Todos os valores estão nos primeiros nós ou no final da lista.\n");
    } else {
        printf("Existem valores no meio da lista.\n");
    }

    return 0;
}
