int main() {
    TAluno vetorAlunos[10];
    TDisciplina vetDisciplinas[10];
    int quantAlunos = 10;
    int quantDisciplinas = 10;

    // Inicializar os alunos
    inicializarAlunos(vetorAlunos, quantAlunos);

    // Criar vetor de disciplinas
    criarVetorDisciplinas(vetorAlunos, vetDisciplinas, quantAlunos);

    // Exibir disciplinas
    exibirDisciplinas(vetDisciplinas, quantDisciplinas);

    return 0;
}
#include <stdio.h>
#include <string.h>

typedef struct {
    char nome[50];
    char disciplina[4];
    float av1;
    float av2;
    char situacao[9];
} TAluno;

typedef struct {
    char codigo[4];
    char situacao[8];
    int quantAlunos;
} TDisciplina;

void criarVetorDisciplinas(TAluno alunos[], TDisciplina vetDisciplinas[], int tamanho) {
    int i, j;

    // Inicializando o vetor de disciplinas
    for (i = 0; i < tamanho; i++) {
        strcpy(vetDisciplinas[i].codigo, alunos[i].disciplina);
        strcpy(vetDisciplinas[i].situacao, "");
        vetDisciplinas[i].quantAlunos = 0;
    }

    // Determinando o status e contando os alunos para cada disciplina
    for (i = 0; i < tamanho; i++) {
        if (alunos[i].av1 + alunos[i].av2 > 7.0) {
            strcpy(alunos[i].situacao, "aprovado");
        } else if (alunos[i].av1 + alunos[i].av2 < 4.0) {
            strcpy(alunos[i].situacao, "reprovado");
        } else {
            strcpy(alunos[i].situacao, "em AVF");
        }

        for (j = 0; j < tamanho; j++) {
            if (strcmp(alunos[i].disciplina, vetDisciplinas[j].codigo) == 0) {
                if (strcmp(alunos[i].situacao, "aprovado") == 0) {
                    strcpy(vetDisciplinas[j].situacao, "aprovado");
                } else if (strcmp(alunos[i].situacao, "reprovado") == 0 && strcmp(vetDisciplinas[j].situacao, "aprovado") != 0) {
                    strcpy(vetDisciplinas[j].situacao, "reprovado");
                } else if (strcmp(alunos[i].situacao, "em AVF") == 0 && (strcmp(vetDisciplinas[j].situacao, "aprovado") != 0 && strcmp(vetDisciplinas[j].situacao, "reprovado") != 0)) {
                    strcpy(vetDisciplinas[j].situacao, "em AVF");
                }
                vetDisciplinas[j].quantAlunos++;
                break;
            }
        }
    }
}

void exibirDisciplinas(TDisciplina vetDisciplinas[], int tamanho) {
    int i;

    printf("Disciplinas:\n");

    for (i = 0; i < tamanho; i++) {
        printf("Código da disciplina: %s\n", vetDisciplinas[i].codigo);
        printf("Situação: %s\n", vetDisciplinas[i].situacao);
        printf("Quantidade de alunos: %d\n\n", vetDisciplinas[i].quantAlunos);
    }
}

void inicializarAlunos(TAluno alunos[], int tamanho) {
    //posicao 0
    strcpy(alunos[0].nome, "JOAO");
    strcpy(alunos[0].disciplina, "FAC");
    alunos[0].av1 = 10.0;
    alunos[0].av2 = 8.0;

    //posicao 1
    strcpy(alunos




//importação de bibliotecas
#include <stdio.h>
#include <string.h>

#include <stdio.h>
#include <string.h>

typedef struct {
    char nome[50];
    char disciplina[4];
    float av1;
    float av2;
    char situacao[9]; // Acrescentei o campo 'situacao' à estrutura TAluno
} TAluno;

typedef struct {
    char nome[10];
	char codigo[4];
    char situacao[8];
    int quantAlunos;
} TDisciplina;

void criarVetorDisciplinas(TAluno alunos[], TDisciplina vetDisciplinas[], int tamanho) {
    int i, j;

    // Inicializando o vetor de disciplinas
    for (i = 0; i < tamanho; i++) {
        strcpy(vetDisciplinas[i].codigo, alunos[i].disciplina);
        strcpy(vetDisciplinas[i].situacao, "");
        vetDisciplinas[i].quantAlunos = 0;
    }

    // Determinando o status e contando os alunos para cada disciplina
    for (i = 0; i < tamanho; i++) {
        if (alunos[i].av1 + alunos[i].av2 > 7.0) {
            strcpy(alunos[i].situacao, "aprovado");
        } else if (alunos[i].av1 + alunos[i].av2 < 4.0) {
            strcpy(alunos[i].situacao, "reprovado");
        } else {
            strcpy(alunos[i].situacao, "em AVF");
        }

        for (j = 0; j < tamanho; j++) {
            if (strcmp(alunos[i].disciplina, vetDisciplinas[j].codigo) == 0) {
                if (strcmp(alunos[i].situacao, "aprovado") == 0) {
                    strcpy(vetDisciplinas[j].situacao, "aprovado");
                } else if (strcmp(alunos[i].situacao, "reprovado") == 0 && strcmp(vetDisciplinas[j].situacao, "aprovado") != 0) {
                    strcpy(vetDisciplinas[j].situacao, "reprovado");
                } else if (strcmp(alunos[i].situacao, "em AVF") == 0 && (strcmp(vetDisciplinas[j].situacao, "aprovado") != 0 && strcmp(vetDisciplinas[j].situacao, "reprovado") != 0)) {
                    strcpy(vetDisciplinas[j].situacao, "em AVF");
                }
                vetDisciplinas[j].quantAlunos++;
                break;
            }
        }
    }
}


int main() {
    TAluno vetorAlunos[10];
    int quantAlunos = 10;
	
	inicializarAlunos (vetorAlunos, 10);
	
	//chamando a função e retornando o vetor vetDisciplinas preenchido
	
    criarVetorDisciplinas(vetorAlunos, quantAlunos,tamanho);
	
	//exibindo o vetor VetDisciplinas
	exibirDisciplinas (vetDisciplinas, quantDisciplinas);

    

    
    exibirDisciplinas(vetDisciplinas, quantAlunos);


   



void exibirDisciplinas (TDisciplina vetDisciplinas[], int tamanho)
{
	int i;
	
	for (i=0;i<tamanho;i++)
	{
		printf ("Disciplina: %s\n", vetDisciplinas[i].nome);
		printf ("Situacao: %s\n", vetDisciplinas[i].situacao);
		printf ("Quantidade de alunos: %d\n\n", vetDisciplinas[i].quantAlunos);
	}
}
